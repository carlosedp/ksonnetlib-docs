<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rbacs on ksonnet lib API Documentation</title>
    <link>http://example.org/rbac/</link>
    <description>Recent content in Rbacs on ksonnet lib API Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Sep 2019 14:37:47 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/rbac/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1/clusterRole/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1/role/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1/roleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1alpha1/role/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1beta1/role/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>new</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRule/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRule/mixinInstance/</guid>
      <description>mixinInstancefunction(aggregationRule) __aggregationRuleMixin(aggregationRule)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/role/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/role/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/mixinInstance/</guid>
      <description>mixinInstancefunction(aggregationRule) __aggregationRuleMixin(aggregationRule)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/mixinInstance/</guid>
      <description>mixinInstancefunction(aggregationRule) __aggregationRuleMixin(aggregationRule)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRef/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRef/mixinInstance/</guid>
      <description>mixinInstancefunction(roleRef) __roleRefMixin(roleRef)</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1/role/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withApiGroup</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRef/withApiGroup/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRef/withApiGroup/</guid>
      <description>withApiGroupfunction(apiGroup) self + __roleRefMixin({ apiGroup: apiGroup }) APIGroup is the group for the resource being referenced</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1/role/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectors</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRule/withClusterRoleSelectors/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRule/withClusterRoleSelectors/</guid>
      <description>withClusterRoleSelectorsfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectors takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectors</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/withClusterRoleSelectors/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/withClusterRoleSelectors/</guid>
      <description>withClusterRoleSelectorsfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectors takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectors</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/withClusterRoleSelectors/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/withClusterRoleSelectors/</guid>
      <description>withClusterRoleSelectorsfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectors takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectorsMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</guid>
      <description>withClusterRoleSelectorsMixinfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors+: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors+: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectorsMixin takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectorsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</guid>
      <description>withClusterRoleSelectorsMixinfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors+: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors+: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectorsMixin takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withClusterRoleSelectorsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/withClusterRoleSelectorsMixin/</guid>
      <description>withClusterRoleSelectorsMixinfunction(clusterRoleSelectors) self + if std.type(clusterRoleSelectors) == &amp;#39;array&amp;#39; then __aggregationRuleMixin({ clusterRoleSelectors+: clusterRoleSelectors }) else __aggregationRuleMixin({ clusterRoleSelectors+: [clusterRoleSelectors] }) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole&amp;rsquo;s permissions will be added
withClusterRoleSelectorsMixin takes an array of type clusterRoleSelectorsType. You can create an instance of clusterRoleSelectorsType with hidden.meta.v1.labelSelector.new().
see hidden.meta.v1.labelSelector</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1/role/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1/role/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withKind</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRef/withKind/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRef/withKind/</guid>
      <description>withKindfunction(kind) self + __roleRefMixin({ kind: kind }) Kind is the type of resource being referenced</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1/role/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1/role/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/role/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRef/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRef/withName/</guid>
      <description>withNamefunction(name) self + __roleRefMixin({ name: name }) Name is the name of resource being referenced</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1/role/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1/role/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1/role/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1/role/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1/clusterRole/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1.policyRule.new().
see hidden.rbac.v1.policyRule</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1/role/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this Role
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1.policyRule.new().
see hidden.rbac.v1.policyRule</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1alpha1.policyRule.new().
see hidden.rbac.v1alpha1.policyRule</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1alpha1/role/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this Role
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1alpha1.policyRule.new().
see hidden.rbac.v1alpha1.policyRule</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1beta1.policyRule.new().
see hidden.rbac.v1beta1.policyRule</description>
    </item>
    
    <item>
      <title>withRules</title>
      <link>http://example.org/rbac/v1beta1/role/withRules/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/withRules/</guid>
      <description>withRulesfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules: rules } else { rules: [rules] } Rules holds all the PolicyRules for this Role
withRules takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1beta1.policyRule.new().
see hidden.rbac.v1beta1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1/clusterRole/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1.policyRule.new().
see hidden.rbac.v1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1/role/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this Role
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1.policyRule.new().
see hidden.rbac.v1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1alpha1.policyRule.new().
see hidden.rbac.v1alpha1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1alpha1/role/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this Role
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1alpha1.policyRule.new().
see hidden.rbac.v1alpha1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this ClusterRole
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1beta1.policyRule.new().
see hidden.rbac.v1beta1.policyRule</description>
    </item>
    
    <item>
      <title>withRulesMixin</title>
      <link>http://example.org/rbac/v1beta1/role/withRulesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/withRulesMixin/</guid>
      <description>withRulesMixinfunction(rules) self + if std.type(rules) == &amp;#39;array&amp;#39; then { rules+: rules } else { rules+: [rules] } Rules holds all the PolicyRules for this Role
withRulesMixin takes an array of type rulesType. You can create an instance of rulesType with hidden.rbac.v1beta1.policyRule.new().
see hidden.rbac.v1beta1.policyRule</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1.subject.new().
see hidden.rbac.v1.subject</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1/roleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1.subject.new().
see hidden.rbac.v1.subject</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1alpha1.subject.new().
see hidden.rbac.v1alpha1.subject</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1alpha1.subject.new().
see hidden.rbac.v1alpha1.subject</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1beta1.subject.new().
see hidden.rbac.v1beta1.subject</description>
    </item>
    
    <item>
      <title>withSubjects</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/withSubjects/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/withSubjects/</guid>
      <description>withSubjectsfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects: subjects } else { subjects: [subjects] } Subjects holds references to the objects the role applies to.
withSubjects takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1beta1.subject.new().
see hidden.rbac.v1beta1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1.subject.new().
see hidden.rbac.v1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1/roleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1.subject.new().
see hidden.rbac.v1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1alpha1.subject.new().
see hidden.rbac.v1alpha1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1alpha1.subject.new().
see hidden.rbac.v1alpha1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1beta1.subject.new().
see hidden.rbac.v1beta1.subject</description>
    </item>
    
    <item>
      <title>withSubjectsMixin</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/withSubjectsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/withSubjectsMixin/</guid>
      <description>withSubjectsMixinfunction(subjects) self + if std.type(subjects) == &amp;#39;array&amp;#39; then { subjects+: subjects } else { subjects+: [subjects] } Subjects holds references to the objects the role applies to.
withSubjectsMixin takes an array of type subjectsType. You can create an instance of subjectsType with hidden.rbac.v1beta1.subject.new().
see hidden.rbac.v1beta1.subject</description>
    </item>
    
    <item>
      <title>aggregationRule</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRule/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRule/</guid>
      <description>AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.</description>
    </item>
    
    <item>
      <title>aggregationRule</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/</guid>
      <description>AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.</description>
    </item>
    
    <item>
      <title>aggregationRule</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/</guid>
      <description>AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1/role/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1/role/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/</guid>
      <description>Standard object&#39;s metadata.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRef/</guid>
      <description>RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRef/</guid>
      <description>RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRef/</guid>
      <description>RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRef/</guid>
      <description>RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRef/</guid>
      <description>RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>roleRef</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRef/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRef/</guid>
      <description>RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.</description>
    </item>
    
    <item>
      <title>aggregationRuleType</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRuleType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRuleType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>aggregationRuleType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRuleType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRuleType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>aggregationRuleType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRuleType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRuleType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>clusterRoleSelectorsType</title>
      <link>http://example.org/rbac/v1/clusterRole/aggregationRule/clusterRoleSelectorsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/aggregationRule/clusterRoleSelectorsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>clusterRoleSelectorsType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/clusterRoleSelectorsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/aggregationRule/clusterRoleSelectorsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>clusterRoleSelectorsType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/clusterRoleSelectorsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/aggregationRule/clusterRoleSelectorsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1/role/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1/role/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1/clusterRole/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1/role/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1/roleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1alpha1/role/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1beta1/role/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1/role/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1/clusterRole/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1/role/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1/roleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1alpha1/role/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1beta1/role/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1/roleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>roleRefType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/roleRefType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/roleRefType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1/clusterRole/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1/role/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1alpha1/role/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>rulesType</title>
      <link>http://example.org/rbac/v1beta1/role/rulesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/rulesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1/roleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>subjectsType</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/subjectsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/subjectsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>clusterRole</title>
      <link>http://example.org/rbac/clusterRole/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/clusterRole/</guid>
      <description>ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.  ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.  ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.  </description>
    </item>
    
    <item>
      <title>clusterRole</title>
      <link>http://example.org/rbac/v1/clusterRole/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRole/</guid>
      <description>ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.</description>
    </item>
    
    <item>
      <title>clusterRole</title>
      <link>http://example.org/rbac/v1alpha1/clusterRole/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRole/</guid>
      <description>ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.</description>
    </item>
    
    <item>
      <title>clusterRole</title>
      <link>http://example.org/rbac/v1beta1/clusterRole/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRole/</guid>
      <description>ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.</description>
    </item>
    
    <item>
      <title>clusterRoleBinding</title>
      <link>http://example.org/rbac/clusterRoleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/clusterRoleBinding/</guid>
      <description>ClusterRoleBinding references a ClusterRole, but not contain it.  ClusterRoleBinding references a ClusterRole, but not contain it.  ClusterRoleBinding references a ClusterRole, but not contain it.  </description>
    </item>
    
    <item>
      <title>clusterRoleBinding</title>
      <link>http://example.org/rbac/v1/clusterRoleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/clusterRoleBinding/</guid>
      <description>ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject.</description>
    </item>
    
    <item>
      <title>clusterRoleBinding</title>
      <link>http://example.org/rbac/v1alpha1/clusterRoleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/clusterRoleBinding/</guid>
      <description>ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject.</description>
    </item>
    
    <item>
      <title>clusterRoleBinding</title>
      <link>http://example.org/rbac/v1beta1/clusterRoleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/clusterRoleBinding/</guid>
      <description>ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject.</description>
    </item>
    
    <item>
      <title>role</title>
      <link>http://example.org/rbac/role/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/role/</guid>
      <description>Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.  Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.  Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.  </description>
    </item>
    
    <item>
      <title>role</title>
      <link>http://example.org/rbac/v1/role/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/role/</guid>
      <description>Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.</description>
    </item>
    
    <item>
      <title>role</title>
      <link>http://example.org/rbac/v1alpha1/role/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/role/</guid>
      <description>Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.</description>
    </item>
    
    <item>
      <title>role</title>
      <link>http://example.org/rbac/v1beta1/role/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/role/</guid>
      <description>Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.</description>
    </item>
    
    <item>
      <title>roleBinding</title>
      <link>http://example.org/rbac/roleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/roleBinding/</guid>
      <description>RoleBinding references a role, but does not contain it.  RoleBinding references a role, but does not contain it.  RoleBinding references a role, but does not contain it.  </description>
    </item>
    
    <item>
      <title>roleBinding</title>
      <link>http://example.org/rbac/v1/roleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1/roleBinding/</guid>
      <description>RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace.</description>
    </item>
    
    <item>
      <title>roleBinding</title>
      <link>http://example.org/rbac/v1alpha1/roleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1alpha1/roleBinding/</guid>
      <description>RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace.</description>
    </item>
    
    <item>
      <title>roleBinding</title>
      <link>http://example.org/rbac/v1beta1/roleBinding/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/rbac/v1beta1/roleBinding/</guid>
      <description>RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace.</description>
    </item>
    
  </channel>
</rss>