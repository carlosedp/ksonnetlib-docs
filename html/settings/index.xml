<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Settings on ksonnet lib API Documentation</title>
    <link>http://example.org/settings/</link>
    <description>Recent content in Settings on ksonnet lib API Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Sep 2019 14:37:47 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/settings/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>new</title>
      <link>http://example.org/settings/v1alpha1/podPreset/new/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/new/</guid>
      <description>newfunction() apiVersion + kind</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/mixinInstance/</guid>
      <description>mixinInstancefunction(initializers) __initializersMixin(initializers)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/mixinInstance/</guid>
      <description>mixinInstancefunction(metadata) __metadataMixin(metadata)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/mixinInstance/</guid>
      <description>mixinInstancefunction(spec) __specMixin(spec)</description>
    </item>
    
    <item>
      <title>mixinInstance</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/mixinInstance/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/mixinInstance/</guid>
      <description>mixinInstancefunction(selector) __selectorMixin(selector)</description>
    </item>
    
    <item>
      <title>withAnnotations</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withAnnotations/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withAnnotations/</guid>
      <description>withAnnotationsfunction(annotations) self + __metadataMixin({ annotations: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withAnnotationsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withAnnotationsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withAnnotationsMixin/</guid>
      <description>withAnnotationsMixinfunction(annotations) self + __metadataMixin({ annotations+: annotations }) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations</description>
    </item>
    
    <item>
      <title>withClusterName</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withClusterName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withClusterName/</guid>
      <description>withClusterNamefunction(clusterName) self + __metadataMixin({ clusterName: clusterName }) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.</description>
    </item>
    
    <item>
      <title>withEnv</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withEnv/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withEnv/</guid>
      <description>withEnvfunction(env) self + if std.type(env) == &amp;#39;array&amp;#39; then __specMixin({ env: env }) else __specMixin({ env: [env] }) Env defines the collection of EnvVar to inject into containers.
withEnv takes an array of type envType. You can create an instance of envType with hidden.core.v1.envVar.new().
see hidden.core.v1.envVar</description>
    </item>
    
    <item>
      <title>withEnvFrom</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withEnvFrom/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withEnvFrom/</guid>
      <description>withEnvFromfunction(envFrom) self + if std.type(envFrom) == &amp;#39;array&amp;#39; then __specMixin({ envFrom: envFrom }) else __specMixin({ envFrom: [envFrom] }) EnvFrom defines the collection of EnvFromSource to inject into containers.
withEnvFrom takes an array of type envFromType. You can create an instance of envFromType with hidden.core.v1.envFromSource.new().
see hidden.core.v1.envFromSource</description>
    </item>
    
    <item>
      <title>withEnvFromMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withEnvFromMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withEnvFromMixin/</guid>
      <description>withEnvFromMixinfunction(envFrom) self + if std.type(envFrom) == &amp;#39;array&amp;#39; then __specMixin({ envFrom+: envFrom }) else __specMixin({ envFrom+: [envFrom] }) EnvFrom defines the collection of EnvFromSource to inject into containers.
withEnvFromMixin takes an array of type envFromType. You can create an instance of envFromType with hidden.core.v1.envFromSource.new().
see hidden.core.v1.envFromSource</description>
    </item>
    
    <item>
      <title>withEnvMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withEnvMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withEnvMixin/</guid>
      <description>withEnvMixinfunction(env) self + if std.type(env) == &amp;#39;array&amp;#39; then __specMixin({ env+: env }) else __specMixin({ env+: [env] }) Env defines the collection of EnvVar to inject into containers.
withEnvMixin takes an array of type envType. You can create an instance of envType with hidden.core.v1.envVar.new().
see hidden.core.v1.envVar</description>
    </item>
    
    <item>
      <title>withFinalizers</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withFinalizers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withFinalizers/</guid>
      <description>withFinalizersfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers: finalizers }) else __metadataMixin({ finalizers: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withFinalizersMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withFinalizersMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withFinalizersMixin/</guid>
      <description>withFinalizersMixinfunction(finalizers) self + if std.type(finalizers) == &amp;#39;array&amp;#39; then __metadataMixin({ finalizers+: finalizers }) else __metadataMixin({ finalizers+: [finalizers] }) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.</description>
    </item>
    
    <item>
      <title>withGenerateName</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withGenerateName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withGenerateName/</guid>
      <description>withGenerateNamefunction(generateName) self + __metadataMixin({ generateName: generateName }) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.</description>
    </item>
    
    <item>
      <title>withLabels</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withLabels/</guid>
      <description>withLabelsfunction(labels) self + __metadataMixin({ labels: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withLabelsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withLabelsMixin/</guid>
      <description>withLabelsMixinfunction(labels) self + __metadataMixin({ labels+: labels }) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels</description>
    </item>
    
    <item>
      <title>withManagedFields</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withManagedFields/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withManagedFields/</guid>
      <description>withManagedFieldsfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields: managedFields }) else __metadataMixin({ managedFields: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withManagedFieldsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withManagedFieldsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withManagedFieldsMixin/</guid>
      <description>withManagedFieldsMixinfunction(managedFields) self + if std.type(managedFields) == &amp;#39;array&amp;#39; then __metadataMixin({ managedFields+: managedFields }) else __metadataMixin({ managedFields+: [managedFields] }) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn&amp;rsquo;t need to set or understand this field. A workflow can be the user&amp;rsquo;s name, a controller&amp;rsquo;s name, or the name of a specific apply path like &amp;ldquo;ci-cd&amp;rdquo;. The set of fields is always in the version that the workflow used when modifying the object.</description>
    </item>
    
    <item>
      <title>withMatchExpressions</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchExpressions/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchExpressions/</guid>
      <description>withMatchExpressionsfunction(matchExpressions) self + if std.type(matchExpressions) == &amp;#39;array&amp;#39; then __selectorMixin({ matchExpressions: matchExpressions }) else __selectorMixin({ matchExpressions: [matchExpressions] }) matchExpressions is a list of label selector requirements. The requirements are ANDed.
withMatchExpressions takes an array of type matchExpressionsType. You can create an instance of matchExpressionsType with hidden.meta.v1.labelSelectorRequirement.new().
see hidden.meta.v1.labelSelectorRequirement</description>
    </item>
    
    <item>
      <title>withMatchExpressionsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchExpressionsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchExpressionsMixin/</guid>
      <description>withMatchExpressionsMixinfunction(matchExpressions) self + if std.type(matchExpressions) == &amp;#39;array&amp;#39; then __selectorMixin({ matchExpressions+: matchExpressions }) else __selectorMixin({ matchExpressions+: [matchExpressions] }) matchExpressions is a list of label selector requirements. The requirements are ANDed.
withMatchExpressionsMixin takes an array of type matchExpressionsType. You can create an instance of matchExpressionsType with hidden.meta.v1.labelSelectorRequirement.new().
see hidden.meta.v1.labelSelectorRequirement</description>
    </item>
    
    <item>
      <title>withMatchLabels</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchLabels/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchLabels/</guid>
      <description>withMatchLabelsfunction(matchLabels) self + __selectorMixin({ matchLabels: matchLabels }) matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.</description>
    </item>
    
    <item>
      <title>withMatchLabelsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchLabelsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/withMatchLabelsMixin/</guid>
      <description>withMatchLabelsMixinfunction(matchLabels) self + __selectorMixin({ matchLabels+: matchLabels }) matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &amp;ldquo;key&amp;rdquo;, the operator is &amp;ldquo;In&amp;rdquo;, and the values array contains only &amp;ldquo;value&amp;rdquo;. The requirements are ANDed.</description>
    </item>
    
    <item>
      <title>withName</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withName/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withName/</guid>
      <description>withNamefunction(name) self + __metadataMixin({ name: name }) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names</description>
    </item>
    
    <item>
      <title>withNamespace</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withNamespace/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withNamespace/</guid>
      <description>withNamespacefunction(namespace) self + __metadataMixin({ namespace: namespace }) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the &amp;ldquo;default&amp;rdquo; namespace, but &amp;ldquo;default&amp;rdquo; is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces</description>
    </item>
    
    <item>
      <title>withOwnerReferences</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withOwnerReferences/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withOwnerReferences/</guid>
      <description>withOwnerReferencesfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences: ownerReferences }) else __metadataMixin({ ownerReferences: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withOwnerReferencesMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/withOwnerReferencesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/withOwnerReferencesMixin/</guid>
      <description>withOwnerReferencesMixinfunction(ownerReferences) self + if std.type(ownerReferences) == &amp;#39;array&amp;#39; then __metadataMixin({ ownerReferences+: ownerReferences }) else __metadataMixin({ ownerReferences+: [ownerReferences] }) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.</description>
    </item>
    
    <item>
      <title>withPending</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/withPending/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/withPending/</guid>
      <description>withPendingfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending: pending }) else __initializersMixin({ pending: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPending takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withPendingMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/withPendingMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/withPendingMixin/</guid>
      <description>withPendingMixinfunction(pending) self + if std.type(pending) == &amp;#39;array&amp;#39; then __initializersMixin({ pending+: pending }) else __initializersMixin({ pending+: [pending] }) Pending is a list of initializers that must execute in order before this object is visible. When the last pending initializer is removed, and no failing result is set, the initializers struct will be set to nil and the object is considered as initialized and visible to all clients.
withPendingMixin takes an array of type pendingType.</description>
    </item>
    
    <item>
      <title>withVolumeMounts</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withVolumeMounts/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withVolumeMounts/</guid>
      <description>withVolumeMountsfunction(volumeMounts) self + if std.type(volumeMounts) == &amp;#39;array&amp;#39; then __specMixin({ volumeMounts: volumeMounts }) else __specMixin({ volumeMounts: [volumeMounts] }) VolumeMounts defines the collection of VolumeMount to inject into containers.
withVolumeMounts takes an array of type volumeMountsType. You can create an instance of volumeMountsType with hidden.core.v1.volumeMount.new().
see hidden.core.v1.volumeMount</description>
    </item>
    
    <item>
      <title>withVolumeMountsMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withVolumeMountsMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withVolumeMountsMixin/</guid>
      <description>withVolumeMountsMixinfunction(volumeMounts) self + if std.type(volumeMounts) == &amp;#39;array&amp;#39; then __specMixin({ volumeMounts+: volumeMounts }) else __specMixin({ volumeMounts+: [volumeMounts] }) VolumeMounts defines the collection of VolumeMount to inject into containers.
withVolumeMountsMixin takes an array of type volumeMountsType. You can create an instance of volumeMountsType with hidden.core.v1.volumeMount.new().
see hidden.core.v1.volumeMount</description>
    </item>
    
    <item>
      <title>withVolumes</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withVolumes/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withVolumes/</guid>
      <description>withVolumesfunction(volumes) self + if std.type(volumes) == &amp;#39;array&amp;#39; then __specMixin({ volumes: volumes }) else __specMixin({ volumes: [volumes] }) Volumes defines the collection of Volume to inject into the pod.
withVolumes takes an array of type volumesType. You can create an instance of volumesType with hidden.core.v1.volume.new().
see hidden.core.v1.volume</description>
    </item>
    
    <item>
      <title>withVolumesMixin</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/withVolumesMixin/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/withVolumesMixin/</guid>
      <description>withVolumesMixinfunction(volumes) self + if std.type(volumes) == &amp;#39;array&amp;#39; then __specMixin({ volumes+: volumes }) else __specMixin({ volumes+: [volumes] }) Volumes defines the collection of Volume to inject into the pod.
withVolumesMixin takes an array of type volumesType. You can create an instance of volumesType with hidden.core.v1.volume.new().
see hidden.core.v1.volume</description>
    </item>
    
    <item>
      <title>initializers</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/</guid>
      <description>An initializer is a controller which enforces some system invariant at object creation time. This field is a list of initializers that have not yet acted on this object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered uninitialized and is hidden (in list/watch and get calls) from clients that haven&#39;t explicitly asked to observe uninitialized objects.

When an object is created, the system will populate this list with the current set of initializers.</description>
    </item>
    
    <item>
      <title>metadata</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/</guid>
      <description></description>
    </item>
    
    <item>
      <title>selector</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/</guid>
      <description>Selector is a label query over a set of resources, in this case pods. Required.</description>
    </item>
    
    <item>
      <title>spec</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/</guid>
      <description></description>
    </item>
    
    <item>
      <title>envFromType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/envFromType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/envFromType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>envType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/envType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/envType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>initializersType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializersType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializersType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>managedFieldsType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/managedFieldsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/managedFieldsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>matchExpressionsType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selector/matchExpressionsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selector/matchExpressionsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>metadataType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadataType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadataType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ownerReferencesType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/ownerReferencesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/ownerReferencesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pendingType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/pendingType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/metadata/initializers/pendingType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>selectorType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/selectorType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/selectorType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>specType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/specType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/specType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>volumeMountsType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/volumeMountsType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/volumeMountsType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>volumesType</title>
      <link>http://example.org/settings/v1alpha1/podPreset/spec/volumesType/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/spec/volumesType/</guid>
      <description></description>
    </item>
    
    <item>
      <title>podPreset</title>
      <link>http://example.org/settings/podPreset/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/podPreset/</guid>
      <description>PodPreset is a policy resource that defines additional runtime requirements for a Pod.  </description>
    </item>
    
    <item>
      <title>podPreset</title>
      <link>http://example.org/settings/v1alpha1/podPreset/</link>
      <pubDate>Sat, 28 Sep 2019 14:37:47 +0000</pubDate>
      
      <guid>http://example.org/settings/v1alpha1/podPreset/</guid>
      <description>PodPreset is a policy resource that defines additional runtime requirements for a Pod.</description>
    </item>
    
  </channel>
</rss>